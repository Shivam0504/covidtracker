{"version":3,"sources":["components/navbar/navbar.js","routes/about.js","components/cards/cards.js","components/graphs/graphs.js","api/index.js","components/countries/countries.js","routes/country.js","routes/global.js","routes/india.js","app.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","color","AppBar","position","style","background","Toolbar","Typography","variant","Button","startIcon","href","About","display","alignItems","justifyContent","flexDirection","marginTop","paddingBottom","Card","CardContent","IconButton","aria-label","primary","pink","Cards","data","cases","recovered","deaths","updated","country","console","log","margin","width","Grid","container","justify","item","component","xs","sm","gutterBottom","start","end","duration","separator","Date","toDateString","amber","lightGreen","grey","Graphs","countryDailyData","dailyConfirmedCases","dailyRecoveredCases","dailyDeaths","i","length","confirmed","barGraph1","backgroundColor","labels","map","date","datasets","label","borderColor","borderWidth","options","text","fontSize","legend","scales","xAxes","gridLines","yAxes","maintainAspectRatio","barGraph2","barGraph3","pieChart","hoverBackgroundColor","responsive","lineChart","fill","lineChart2","marginBottom","url","fetchData","a","countryURL","axios","get","lastUpdate","value","Countries","countryStats","filter","e","Country","TotalConfirmed","TotalRecovered","TotalDeaths","fetchDailyData","cDailyData","modifiedData","Confirmed","Recovered","Deaths","dailyData","total","reportDate","fetchCountries","countries","DATA","c","sort","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fecthAPI","FormControl","padding","NativeSelect","defaultValue","onChange","target","disabled","key","state","countryData","setState","this","React","Component","Global","India","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.520c534a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport PlaceIcon from '@material-ui/icons/Place';\r\n//import {Link } from 'react-router-dom';\r\n//import IconButton from '@material-ui/core/IconButton';\r\n//import MenuIcon from '@material-ui/icons/Menu';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root} color=\"secondary\">\r\n      <AppBar position=\"static\" style={{ background: '#2E3B55' }}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            COVID TRACKER\r\n          </Typography>\r\n         \r\n          <Button  variant=\"contained\" startIcon= {<HomeIcon/>} href=\"/\">Home</Button>\r\n          <Button  variant=\"contained\"  startIcon={<PublicIcon/>} href=\"/country\">Country-wise stats</Button>\r\n          <Button  variant=\"contained\"  startIcon={<PlaceIcon/>} color=\"default\" href=\"/india\">India</Button>\r\n          <Button   variant=\"contained\" startIcon={<AccountCircleIcon/>} color=\"default\" href=\"/about\">About</Button>\r\n          \r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport {Card , CardContent , Typography} from '@material-ui/core';\r\n//mport EmailIcon from '@material-ui/icons/Email';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nexport default function About() {\r\n\r\n\r\n  return (\r\n    <div >\r\n     \r\n     <div style={{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",flexDirection:\"column\",marginTop:\"10%\",paddingBottom:\"30%\"}}>\r\n       <Card>\r\n           <CardContent>\r\n               <Typography>\r\n                   Developed By Shivam Kirti\r\n               </Typography>\r\n               <Typography>\r\n                   Sophomore @ BIT Mesra\r\n               </Typography>\r\n               <div style={{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",flexDirection:\"row\"}}>\r\n               <IconButton aria-label=\"delete\" href=\"https://www.linkedin.com/in/shivam-kirti-47159618b\">\r\n               <LinkedInIcon />\r\n             </IconButton>\r\n             <IconButton aria-label=\"delete\" href=\"https://github.com/Shivam0504\">\r\n               <GitHubIcon />\r\n             </IconButton>\r\n             </div>\r\n\r\n           </CardContent>\r\n       </Card>\r\n    </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport {Card , CardContent , Typography , Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n//import FaceIcon from '@material-ui/icons/Face';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport lightGreen from '@material-ui/core/colors/lightGreen';\r\nimport pink from '@material-ui/core/colors/pink';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport MoodIcon from '@material-ui/icons/Mood';\r\nimport HealingIcon from '@material-ui/icons/Healing';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\r\n\r\n\r\nconst primary = pink[400];\r\n\r\n\r\nconst Cards = ({data :{cases , recovered , deaths , updated},country}) => {\r\n    console.log(country)\r\n    if(country===\"none\")\r\n    {\r\n        return <div style={{paddingBottom:\"30%\"}}><h5>Use the drop down menu to select a country</h5></div>\r\n\r\n    }\r\n    else if(!cases){\r\n        return <div style={{paddingBottom:\"30%\"}}><h5>Data Not Available Please select another country</h5></div>\r\n    }\r\n    return (\r\n        <div style={{margin:\"2%\" ,width:\"80%\"}}>\r\n            <Grid container spacing={1} justify=\"center\" >\r\n                <Grid item component = {Card}  xs={8} sm={3} style={{ background: primary }}>\r\n                    <CardContent>\r\n                        <PeopleIcon/>\r\n                        <Typography gutterBottom>TOTAL</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={cases} duration={1.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textPrimary\" gutterBottom>{new Date(updated).toDateString()}</Typography>\r\n                        \r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component = {Card} xs={8} sm={3} style={{ background: amber[800] }} >\r\n                    <CardContent>\r\n                        <HealingIcon/>\r\n                        <Typography color=\"textPrimary\" gutterBottom>ACTIVE</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={cases-recovered-deaths} duration={1.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textPrimary\" gutterBottom>{new Date(updated).toDateString()}</Typography>\r\n                        \r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component = {Card} xs={8} sm={3}style={{ background: lightGreen[400] }}>\r\n                    <CardContent>\r\n                        <MoodIcon/>\r\n                        <Typography color=\"textPrimary\" gutterBottom>RECOVERED</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={recovered} duration={1.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textPrimary\" gutterBottom>{new Date(updated).toDateString()}</Typography>\r\n                        \r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component = {Card} xs={8} sm={3}style={{ background: grey[500]}}>\r\n                    <CardContent justify=\"center\" >\r\n                        <MoodBadIcon/>\r\n                        <Typography color=\"textPrimary\" gutterBottom>DEATHS</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={deaths} duration={1.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textPrimary\" gutterBottom>{new Date(updated).toDateString()}</Typography>\r\n                        \r\n                    </CardContent>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React ,{Fragment} from 'react';\r\nimport {Line,Doughnut,Bar} from 'react-chartjs-2';\r\n//import TimelineIcon from '@material-ui/icons/Timeline';\r\n//import { Typography } from '@material-ui/core';\r\n//import TimelineIcon from '@material-ui/icons/Timeline';\r\nimport {Card , CardContent} from '@material-ui/core';\r\n\r\nconst Graphs = ({countryDailyData ,data :{cases , recovered , deaths , updated},country})=>{\r\n    \r\n    console.log(country);\r\n    const dailyConfirmedCases = [0];\r\n    const dailyRecoveredCases = [0];\r\n    const dailyDeaths = [0];\r\n    for(var i = 1; i<countryDailyData.length;i+=1)\r\n    {\r\n        //console.log(countryDailyData[i])\r\n       // console.log(countryDailyData[i])\r\n        dailyConfirmedCases[i]=countryDailyData[i].confirmed-countryDailyData[i-1].confirmed<0?0:countryDailyData[i].confirmed-countryDailyData[i-1].confirmed;\r\n        dailyRecoveredCases[i]=countryDailyData[i].recovered-countryDailyData[i-1].recovered<0?0:countryDailyData[i].recovered-countryDailyData[i-1].recovered;\r\n        dailyDeaths[i]=(countryDailyData[i].deaths-countryDailyData[i-1].deaths)<0?0:(countryDailyData[i].deaths-countryDailyData[i-1].deaths);\r\n    }\r\n    console.log(dailyRecoveredCases)\r\n    const barGraph1 = (countryDailyData.length?\r\n        (\r\n            <div style={{backgroundColor:\"#ffe0b2\"}}>\r\n              <Bar\r\n                data={{\r\n                    labels: countryDailyData.map(({date})=>new Date(date).toDateString()),\r\n                    datasets: [\r\n                      {\r\n                        label: 'Infected',\r\n                        backgroundColor: '#ffb300',\r\n                                borderColor: '#ff6f00',\r\n                        borderWidth: 2,\r\n                        data: dailyConfirmedCases\r\n                      }\r\n                    ]\r\n                  }}\r\n                options={{\r\n                  title:{\r\n                    display:true,\r\n                    text:'Daily Cases',\r\n                    fontSize:20\r\n                  },\r\n                  legend:{\r\n                    display:true,\r\n                    position:'right'\r\n                  },\r\n                  scales: {\r\n                    xAxes: [{\r\n                        gridLines: {\r\n                            color: \"rgba(0, 0, 0, 0)\",\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        gridLines: {\r\n                            color: \"rgba(0, 0, 0, 0)\",\r\n                        }   \r\n                    }]},\r\n                  maintainAspectRatio: true\r\n                }}\r\n              />\r\n            </div>\r\n          )\r\n          :null);\r\n          const barGraph2 = (countryDailyData.length?\r\n            (\r\n                <div style={{backgroundColor:\"#b2ff59\"}}>\r\n                  <Bar\r\n                    data={{\r\n                        labels: countryDailyData.map(({date})=>new Date(date).toDateString()),\r\n                        datasets: [\r\n                          {\r\n                            label: 'Recovered',\r\n                            backgroundColor: '#8bc34a',\r\n                                borderColor: '#689f38',\r\n                            borderWidth: 2,\r\n                            data: dailyRecoveredCases\r\n                          }\r\n                        ]\r\n                      }}\r\n                    options={{\r\n                      title:{\r\n                        display:true,\r\n                        text:'Daily Recovered',\r\n                        fontSize:20\r\n                      },\r\n                      scales: {\r\n                        xAxes: [{\r\n                            gridLines: {\r\n                                color: \"rgba(0, 0, 0, 0)\",\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            gridLines: {\r\n                                color: \"rgba(0, 0, 0, 0)\",\r\n                            }   \r\n                        }]},\r\n                      legend:{\r\n                        display:true,\r\n                        position:'right'\r\n                      },\r\n                      maintainAspectRatio: true\r\n                    }}\r\n                  />\r\n                </div>\r\n              )\r\n              :null);\r\n    \r\n              const barGraph3 = (countryDailyData.length?\r\n                (\r\n                    <div style={{backgroundColor:\"#e0e0e0\"}}>\r\n                      <Bar\r\n                        data={{\r\n                            labels: countryDailyData.map(({date})=>new Date(date).toDateString()),\r\n                            datasets: [\r\n                              {\r\n                                label: 'Deaths',\r\n                                backgroundColor: '#78909c',\r\n                                borderColor: '#455a64',\r\n                                borderWidth: 2,\r\n                                data: dailyDeaths\r\n                              }\r\n                            ]\r\n                          }}\r\n                        options={{\r\n                          title:{\r\n                            display:true,\r\n                            text:'Daily deaths',\r\n                            fontSize:20\r\n                          },\r\n                          legend:{\r\n                            display:true,\r\n                            position:'right'\r\n                          },\r\n                          maintainAspectRatio: true,\r\n                          scales: {\r\n                            xAxes: [{\r\n                                gridLines: {\r\n                                    color: \"rgba(0, 0, 0, 0)\",\r\n                                }\r\n                            }],\r\n                            yAxes: [{\r\n                                gridLines: {\r\n                                    color: \"rgba(0, 0, 0, 0)\",\r\n                                }   \r\n                            }]}\r\n\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  )\r\n                  :null);\r\n    const pieChart =  (countryDailyData.length?(\r\n        <div style={{backgroundColor:\"#fff59d\"}}>\r\n        <Doughnut\r\n          data={\r\n            {\r\n                labels: ['Active', 'Recovered', 'Deaths'],\r\n                datasets: [\r\n                  {\r\n                    label: 'Cases',\r\n                    backgroundColor: [\r\n                      \r\n                      '#ffa000',\r\n                      '#c6ff00',\r\n                      '#e0e0e0'\r\n                    ],\r\n                    hoverBackgroundColor: [\r\n                    \r\n                    '#e65100',\r\n                    '#64dd17',\r\n                    '#212121'\r\n                    ],\r\n                    //data:[2,3,5]\r\n                    data:[cases-recovered-deaths,recovered,deaths]\r\n                  }\r\n                ]\r\n              }\r\n          }\r\n          options={{\r\n            title:{\r\n              display:true,\r\n              text:'Pie chart',\r\n              fontSize:20\r\n            },\r\n            legend:{\r\n              display:true,\r\n              position:'right'\r\n            },\r\n            \r\n            responsive: true,\r\n          maintainAspectRatio: true,\r\n          }}\r\n        /></div>\r\n    )\r\n    :null);\r\n    \r\n    const lineChart = (\r\n        \r\n        countryDailyData.length?(\r\n            <div style={{backgroundColor:\"#fff59d\"}}>\r\n            <Line data={{\r\n                labels : countryDailyData.map(({date})=>new Date(date).toDateString()),\r\n                datasets : [{\r\n                    data : countryDailyData.map(({confirmed})=> confirmed),\r\n                    label : 'Infected',\r\n                    borderColor: '#ff1744',\r\n                    fill : false\r\n                },{\r\n                    data : countryDailyData.map(({deaths})=> deaths),\r\n                    label : 'Deaths',\r\n                    borderColor: 'black ',\r\n                    fill : false\r\n                }]}}\r\n                options={{\r\n                    title:{\r\n                      display:true,\r\n                      text:'Live chart',\r\n                      fontSize:20\r\n                    },\r\n                    scales: {\r\n                        xAxes: [{\r\n                            gridLines: {\r\n                                color: \"rgba(0, 0, 0, 0)\",\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            gridLines: {\r\n                                color: \"rgba(0, 0, 0, 0)\",\r\n                            }   \r\n                        }]},\r\n                    maintainAspectRatio: true,\r\n                }}\r\n                \r\n            \r\n            /></div>)\r\n            :null\r\n    )\r\n    \r\n    \r\n    const lineChart2 =(\r\n        countryDailyData.length?(\r\n            <div style={{backgroundColor:\"#fff59d\"}}>\r\n            <Line data={{\r\n                labels : countryDailyData.map(({date})=>new Date(date).toDateString()),\r\n                datasets : [{\r\n                    data : countryDailyData.map(({confirmed})=> confirmed),\r\n                    label : 'Infected',\r\n                    borderColor: '#ff1744',\r\n                    fill : false\r\n                },{\r\n                    data : countryDailyData.map(({deaths})=> deaths),\r\n                    label : 'Deaths',\r\n                    borderColor: 'black ',\r\n                    fill : false\r\n                },\r\n                {\r\n                    data : countryDailyData.map(({recovered})=> recovered),\r\n                    label : 'Recovered',\r\n                    borderColor: 'green',\r\n                    fill : false\r\n                }]}}\r\n                options={{\r\n                    title:{\r\n                      display:true,\r\n                      text:'Live chart',\r\n                      fontSize:20\r\n                    },\r\n                    scales: {\r\n                        xAxes: [{\r\n                            gridLines: {\r\n                                color: \"rgba(0, 0, 0, 0)\",\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            gridLines: {\r\n                                color: \"rgba(0, 0, 0, 0)\",\r\n                            }   \r\n                        }]},\r\n                    maintainAspectRatio: true,\r\n                }}\r\n                \r\n            \r\n            /></div>)\r\n            :null\r\n    );\r\n     if(countryDailyData.length){\r\n    return (\r\n        \r\n       \r\n        <Fragment>\r\n        <div style={{justifyContent:\"center\",width:\"65%\",marginBottom:\"2%\"}}>\r\n            \r\n        <Card >\r\n       \r\n         <CardContent>\r\n         \r\n         {(country===\"global\")?lineChart:lineChart2}\r\n          </CardContent>\r\n      \r\n         </Card>   \r\n            \r\n        </div>\r\n        \r\n        <div style={{justifyContent:\"center\",width:\"65%\",marginBottom:\"2%\"}}>\r\n            \r\n        <Card >\r\n         <CardContent>\r\n             {barGraph1}\r\n          </CardContent>\r\n      \r\n         </Card>   \r\n            \r\n        </div>\r\n        \r\n   \r\n        <div style={{justifyContent:\"center\",width:\"65%\",marginBottom:\"2%\"}}>\r\n        \r\n        {(country!==\"global\")?\r\n        <Card >\r\n         <CardContent>\r\n             {barGraph2}\r\n          </CardContent>\r\n      \r\n         </Card>   :<div></div>\r\n     }\r\n        </div>\r\n        \r\n        <div style={{justifyContent:\"center\",width:\"65%\",marginBottom:\"2%\"}}>\r\n            \r\n        <Card >\r\n         <CardContent>\r\n             {barGraph3}\r\n          </CardContent>\r\n      \r\n         </Card>   \r\n            \r\n        </div>\r\n        <div style={{justifyContent:\"center\",width:\"65%\",marginBottom:\"2%\"}}>\r\n            \r\n        <Card>\r\n         <CardContent>\r\n\r\n             {pieChart}\r\n          </CardContent>\r\n      \r\n         </Card>   \r\n            \r\n        </div>\r\n        \r\n        </Fragment>\r\n       \r\n    )\r\n     }\r\n     return (\r\n         <div></div>\r\n     )\r\n}   \r\n\r\n\r\nexport default Graphs;","import axios from 'axios';\r\n\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) =>{\r\n    let countryURL= url;\r\n    if(country){\r\n    countryURL= `https://api.covid19api.com/summary`;}\r\n    try{\r\n        \r\n        //console.log(Global);\r\n        if(!country)\r\n        {\r\n            //const res = await axios.get(url);\r\n            //console.log(res);\r\n            const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios.get(url);\r\n            //const response = await axios.get(url);\r\n            //console.log(lastUpdate);\r\n            return {cases:confirmed.value, recovered : recovered.value , deaths : deaths.value , updated : lastUpdate};\r\n\r\n        }\r\n        const {data : {Countries}} = await axios.get(countryURL);\r\n        const countryStats=  Countries.filter((e)=>(e.Country===country));\r\n        console.log(countryStats);\r\n        return {cases:countryStats[0].TotalConfirmed , recovered:countryStats[0].TotalRecovered , deaths :countryStats[0].TotalDeaths , updated :countryStats[0].Date}\r\n\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async (country) =>{\r\n    try{\r\n        if(country)\r\n        {\r\n            const cDailyData= await axios.get(`https://api.covid19api.com/total/dayone/country/${country}`);\r\n            console.log(cDailyData);\r\n            const modifiedData = cDailyData.data.map((e)=>({\r\n                confirmed : e.Confirmed,\r\n                recovered : e.Recovered,\r\n                deaths : e.Deaths,\r\n                date : e.Date\r\n             }));\r\n             //console.log(modifiedData);\r\n            return modifiedData;\r\n        }\r\n        const {data}= await axios.get(`${url}/daily`);\r\n        console.log(data);\r\n        const modifiedData = data.map((dailyData)=>({\r\n            confirmed : dailyData.confirmed.total,\r\n            recovered : dailyData.recovered.total,\r\n            deaths : dailyData.deaths.total,\r\n            date : dailyData.reportDate\r\n        }));\r\n        console.log(modifiedData);\r\n        return modifiedData;\r\n    \r\n\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n    }\r\n};\r\n\r\n\r\nexport const fetchCountries = async () =>{\r\n    try{\r\n        const contUrl=\"https://api.covid19api.com/countries\";\r\n        const countries = await axios.get(contUrl);\r\n        //console.log(countries);\r\n        const DATA =countries.data.map((c)=>c.Country);\r\n        DATA.sort();\r\n        return DATA;\r\n\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n    }\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport {fetchCountries} from '../../api';\r\n\r\nconst Countries =({handleCountryChange}) =>{   \r\n    const [fetchedCountries,setFetchedCountries] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fecthAPI = async () =>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fecthAPI();\r\n    },[setFetchedCountries]);\r\n    \r\n        return (\r\n            <FormControl style={{padding : \"2.5%\"}}>\r\n                <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)} >\r\n                    <option value=\"\" disabled={true} >None</option>\r\n                    {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n       \r\n\r\n                </NativeSelect>\r\n            </FormControl>\r\n        )\r\n    \r\n}\r\n\r\nexport default Countries;","import React from 'react';\r\nimport Cards from '../components/cards/cards';\r\nimport Graphs from '../components/graphs/graphs';\r\nimport Countries from '../components/countries/countries';\r\nimport {fetchData,fetchDailyData} from '../api';\r\n//import { Typography } from '@material-ui/core';\r\n\r\nexport default class Country extends React.Component{\r\n\r\n    state = {\r\n        data :{},\r\n        country : \"none\",\r\n        countryDailyData:[]\r\n    }\r\n        \r\n    handleCountryChange= async(country)=>{\r\n        console.log(country);\r\n        const countryData = await fetchData(country);\r\n        const countryDailyData = await fetchDailyData(country);\r\n        console.log(countryDailyData);\r\n        this.setState({data : countryData, country:country, countryDailyData: countryDailyData});\r\n    }\r\n    /*async componentDidMount(){\r\n        /*const data = await fetchData();\r\n        //console.log(data);\r\n        const countryDailyData = await fetchDailyData();\r\n        console.log(countryDailyData)\r\n        this.setState({data,countryDailyData});\r\n        this.state.country=\"None\";\r\n\r\n    }*/\r\n    render(){\r\n  return (\r\n    <div >\r\n     \r\n     <div style={{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",flexDirection:\"column\"}}>\r\n        <h2>Please Select a Country</h2>\r\n        <Countries handleCountryChange={this.handleCountryChange}/>\r\n        <Cards data={this.state.data} country={this.state.country}/>\r\n        <Graphs countryDailyData={this.state.countryDailyData}  data={this.state.data} />\r\n    </div>\r\n    </div>\r\n  );}\r\n}","import React ,{Fragment}from 'react';\r\nimport Cards from '../components/cards/cards';\r\nimport Graphs from '../components/graphs/graphs';\r\n//import Countries from '../components/countries/countries';\r\nimport {fetchData,fetchDailyData} from '../api';\r\n//import amber from '@material-ui/core/colors/amber';\r\n\r\nexport default class Global extends React.Component{\r\n\r\n    state = {\r\n        data :{},\r\n        countryDailyData:[]\r\n    }\r\n    async componentDidMount(){\r\n        const data = await fetchData();\r\n        //console.log(data);\r\n        const countryDailyData = await fetchDailyData();\r\n        console.log(countryDailyData)\r\n        this.setState({data,countryDailyData});\r\n\r\n    }\r\n    render(){\r\n  return (\r\n    <Fragment >\r\n     \r\n     <div style={{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",flexDirection:\"column\"}}>\r\n     <h1>Worldwide Stats</h1>\r\n        <Cards data={this.state.data}/>\r\n        <Graphs countryDailyData={this.state.countryDailyData} data={this.state.data} country=\"global\"/>\r\n    </div>\r\n    </Fragment>\r\n  );}\r\n}","import React from 'react';\r\nimport Cards from '../components/cards/cards';\r\nimport Graphs from '../components/graphs/graphs';\r\n//import Countries from '../components/countries/countries';\r\nimport {fetchData,fetchDailyData} from '../api';\r\n\r\nexport default class India extends React.Component{\r\n\r\n    state = {\r\n        data :{},\r\n        countryDailyData:[]\r\n    }\r\n    async componentDidMount(){\r\n        const data = await fetchData(\"India\");\r\n        //console.log(data);\r\n        const countryDailyData = await fetchDailyData(\"India\");\r\n        console.log(countryDailyData)\r\n        this.setState({data,countryDailyData});\r\n\r\n    }\r\n    render(){\r\n  return (\r\n    <div >\r\n     \r\n        <div style={{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",flexDirection:\"column\"}}>\r\n        <h1>India</h1>\r\n        <Cards data={this.state.data} country=\"India\"/>\r\n        <Graphs countryDailyData={this.state.countryDailyData}  data={this.state.data}/>\r\n    </div>\r\n    </div>\r\n  );}\r\n}","import React from 'react';\r\n\r\n\r\nimport NavBar from './components/navbar/navbar';\r\nimport { BrowserRouter as Router ,Route,Switch} from 'react-router-dom';\r\n\r\n//import {About,Country,Global,India} from './routes';\r\nimport About from './routes/about'\r\nimport Country from './routes/country'\r\nimport Global from './routes/global'\r\nimport India from './routes/india'\r\n//import indigo from '@material-ui/core/colors/indigo';\r\n\r\nclass App extends React.Component{\r\n    \r\n\r\n    render(){\r\n        return (\r\n            <Router>\r\n            <div style={{backgroundColor:\"#f5f5f5\"}}>\r\n                <NavBar/>\r\n                <Switch>\r\n                <Route exact path=\"/\">\r\n                <Global />\r\n                </Route>\r\n                <Route path=\"/about\">\r\n                <About />\r\n                </Route>\r\n                <Route path=\"/country\">\r\n                <Country />\r\n                </Route>\r\n                <Route path=\"/india\">\r\n                <India />\r\n                </Route>\r\n                </Switch>\r\n                \r\n            </div>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));"],"sourceRoot":""}