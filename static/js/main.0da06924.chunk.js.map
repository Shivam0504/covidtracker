{"version":3,"sources":["components/cards/cards.js","components/graphs/graphs.js","api/index.js","components/countries/countries.js","app.js","index.js"],"names":["Cards","data","cases","recovered","deaths","updated","Grid","container","spacing","justify","item","component","Card","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Graphs","countryDailyData","lineChart","length","labels","map","date","datasets","confirmed","label","borderColor","fill","style","display","justifyContent","width","url","fetchData","country","a","countryURL","axios","get","lastUpdate","console","log","value","Countries","countryStats","filter","e","Country","TotalConfirmed","TotalRecovered","TotalDeaths","fetchDailyData","cDailyData","modifiedData","Confirmed","Deaths","dailyData","total","reportDate","fetchCountries","countries","DATA","c","sort","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fecthAPI","FormControl","padding","NativeSelect","defaultValue","onChange","target","i","key","App","state","countryData","setState","this","alignItems","flexDirection","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0da06924.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card , CardContent , Typography , Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n\r\n\r\nconst Cards = ({data :{cases , recovered , deaths , updated}}) => {\r\n    if(!cases){\r\n    return \"Data Not Available Please select another country\";}\r\n    return (\r\n        <div>\r\n            <Grid container spacing={3} justify=\"center\" >\r\n                <Grid item component = {Card}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Total Cases :</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={cases} duration={1.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>{new Date(updated).toDateString()}</Typography>\r\n                        \r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component = {Card}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered :</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={recovered} duration={1.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>{new Date(updated).toDateString()}</Typography>\r\n                        \r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component = {Card}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths :</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={deaths} duration={1.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>{new Date(updated).toDateString()}</Typography>\r\n                        \r\n                    </CardContent>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nconst Graphs = ({countryDailyData})=>{\r\n    \r\n    const lineChart = (\r\n        countryDailyData.length?(\r\n            <Line data={{\r\n                labels : countryDailyData.map(({date})=>new Date(date).toDateString()),\r\n                datasets : [{\r\n                    data : countryDailyData.map(({confirmed})=> confirmed),\r\n                    label : 'Infected',\r\n                    borderColor: 'red',\r\n                    fill : false\r\n                },{\r\n                    data : countryDailyData.map(({deaths})=> deaths),\r\n                    label : 'Deaths',\r\n                    borderColor: 'black ',\r\n                    fill : false\r\n                }]\r\n            }} />)\r\n            :null\r\n    );\r\n        \r\n    return (\r\n        <div style={{display :\"flex\",justifyContent:\"center\",width:\"65%\"}}>\r\n            {lineChart}\r\n        </div>\r\n    )\r\n\r\n}   \r\n\r\n\r\nexport default Graphs;","import axios from 'axios';\r\n\r\n\r\nconst url = 'http://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) =>{\r\n    let countryURL= url;\r\n    if(country){\r\n    countryURL= `https://api.covid19api.com/summary`;}\r\n    try{\r\n        \r\n        //console.log(Global);\r\n        if(!country)\r\n        {\r\n            const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios.get(url);\r\n            //const response = await axios.get(url);\r\n            console.log(lastUpdate);\r\n            return {cases:confirmed.value, recovered : recovered.value , deaths : deaths.value , updated : lastUpdate};\r\n\r\n        }\r\n        const {data : {Countries}} = await axios.get(countryURL);\r\n        const countryStats=  Countries.filter((e)=>(e.Country===country));\r\n        console.log(countryStats);\r\n        return {cases:countryStats[0].TotalConfirmed , recovered:countryStats[0].TotalRecovered , deaths :countryStats[0].TotalDeaths , updated :countryStats[0].Date}\r\n\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async (country) =>{\r\n    try{\r\n        if(country)\r\n        {\r\n            const cDailyData= await axios.get(`https://api.covid19api.com/total/dayone/country/${country}`);\r\n            \r\n            const modifiedData = cDailyData.data.map((e)=>({\r\n                confirmed : e.Confirmed,\r\n                deaths : e.Deaths,\r\n                date : e.Date\r\n             }));\r\n             //console.log(modifiedData);\r\n            return modifiedData;\r\n        }\r\n        const {data}= await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData)=>({\r\n            confirmed : dailyData.confirmed.total,\r\n            deaths : dailyData.deaths.total,\r\n            date : dailyData.reportDate\r\n        }));\r\n        console.log(modifiedData);\r\n        return modifiedData;\r\n    \r\n\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n    }\r\n};\r\n\r\n\r\nexport const fetchCountries = async () =>{\r\n    try{\r\n        const contUrl=\"https://api.covid19api.com/countries\";\r\n        const countries = await axios.get(contUrl);\r\n        //console.log(countries);\r\n        const DATA =countries.data.map((c)=>c.Country);\r\n        DATA.sort();\r\n        return DATA;\r\n\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n    }\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport {fetchCountries} from '../../api';\r\n\r\nconst Countries =({handleCountryChange}) =>{   \r\n    const [fetchedCountries,setFetchedCountries] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fecthAPI = async () =>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fecthAPI();\r\n    },[setFetchedCountries]);\r\n    \r\n        return (\r\n            <FormControl style={{padding : \"2.5%\"}}>\r\n                <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)} >\r\n                    <option value=\"\">Global</option>\r\n                    {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n       \r\n\r\n                </NativeSelect>\r\n            </FormControl>\r\n        )\r\n    \r\n}\r\n\r\nexport default Countries;","import React from 'react';\r\nimport Cards from './components/cards/cards';\r\nimport Graphs from './components/graphs/graphs';\r\nimport Countries from './components/countries/countries';\r\nimport {fetchData,fetchDailyData} from './api';\r\n\r\n\r\nclass App extends React.Component{\r\n    \r\n    state = {\r\n        data :{},\r\n        country : \"\",\r\n        countryDailyData:[]\r\n    }\r\n        \r\n    handleCountryChange= async(country)=>{\r\n        //console.log(country);\r\n        const countryData = await fetchData(country);\r\n        const countryDailyData = await fetchDailyData(country);\r\n        console.log(countryDailyData);\r\n        this.setState({data : countryData, country:country, countryDailyData: countryDailyData});\r\n    }\r\n    async componentDidMount(){\r\n        const data = await fetchData();\r\n        //console.log(data);\r\n        const countryDailyData = await fetchDailyData();\r\n        console.log(countryDailyData)\r\n        this.setState({data,countryDailyData});\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div style={{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",flexDirection:\"column\"}}>\r\n                <h1>Covid Tracker</h1>\r\n                <Cards data={this.state.data}/>\r\n                <Countries handleCountryChange={this.handleCountryChange}/>\r\n                <Graphs countryDailyData={this.state.countryDailyData}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));"],"sourceRoot":""}